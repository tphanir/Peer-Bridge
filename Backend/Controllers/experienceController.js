const db = require('../db'); // Assuming you're using this to connect to the database


const getExperienceByCompany = (req, res) => {
    const { company_name } = req.query; // Get company name from query parameters

    if (!company_name) {
        return res.status(400).json({ message: 'Company name is required' });
    }

    // SQL query to find experiences by company name
    const query = `SELECT * FROM experience WHERE company_name = ?`;

    db.execute(query, [company_name], (err, results) => {
        if (err) {
            return res.status(500).json({ message: 'Error fetching experiences', error: err.message });
        }

        if (results.length === 0) {
            return res.status(404).json({ message: 'No experiences found for this company' });
        }

        res.status(200).json({
            status: 'success',
            data: results
        });
    });
};

const addExperience = (req, res) => {
    // Extracting values from the request body
    const { studentid, company_name, position, interview_type, interview_rounds, duration, 
            interview_location, difficulty_level, interview_questions, interview_experience, 
            outcome, feedback, tips, preplinks, resources } = req.body;

    // Validation: Check if all required fields are provided
    if (!studentid || !company_name || !position || !interview_type || !interview_rounds || 
        !interview_location || !difficulty_level || !outcome) {
        return res.status(400).json({ message: 'Missing required fields' });
    }

    // Prepare the SQL query for inserting experience data
    const query = `
        INSERT INTO experience (studentid, company_name, position, interview_type, interview_rounds, 
                                duration, interview_location, difficulty_level, interview_questions, 
                                interview_experience, outcome, feedback, tips, preplinks, resources)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `;

    // Execute the query to insert the data
    db.execute(query, [studentid, company_name, position, interview_type, interview_rounds, 
                       duration, interview_location, difficulty_level, interview_questions, 
                       interview_experience, outcome, feedback, tips, JSON.stringify(preplinks), resources], 
        (err, results) => {
            if (err) {
                return res.status(500).json({ message: 'Error adding experience', error: err.message });
            }

            // Return success message with the inserted experience details
            res.status(201).json({
                status: 'success',
                message: 'Experience added successfully',
                data: {
                    experience_id: results.insertId, // New experience ID generated by MySQL
                    studentid,
                    company_name,
                    position,
                    interview_type,
                    interview_rounds,
                    duration,
                    interview_location,
                    difficulty_level,
                    interview_questions,
                    interview_experience,
                    outcome,
                    feedback,
                    tips,
                    preplinks,
                    resources
                }
            });
        }
    );
};

module.exports = { addExperience, getExperienceByCompany };
